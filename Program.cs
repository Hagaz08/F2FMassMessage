
//Generated by Selenium IDE
using OfficeOpenXml;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Interactions;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Threading;
using static System.Runtime.InteropServices.JavaScript.JSType;

public class CreatorData
{
    public string CreatorName { get; set; }
    public string Message { get; set; }
    public string StartTime { get; set; }
    public string EndTime { get; set; }
}

public class SuiteTests : IDisposable
{
    public IWebDriver driver { get; private set; }

    public SuiteTests()
    {
        driver = new ChromeDriver();
    }

    public void Dispose()
    {
        driver.Quit();
    }

    public void Planningpostfotovideofromalbum(List<CreatorData> creators)
    {
        try
        {
            driver.Navigate().GoToUrl("https://f2f.com/");
            driver.Manage().Window.Size = new Size(1708, 1424);
            driver.FindElement(By.CssSelector(".navbar-item > .profile-image")).Click();
            driver.FindElement(By.LinkText("Ga naar agency")).Click();
            driver.FindElement(By.CssSelector("tr:nth-child(2) .\\_9MjrcG_email")).Click();
            driver.FindElement(By.CssSelector(".\\_7lrYkG_text:nth-child(2)")).Click();
            driver.FindElement(By.CssSelector(".x9qUeG_linkItem:nth-child(1) > .x9qUeG_textContainer")).Click();

            var element = driver.FindElement(By.CssSelector("div:nth-child(1) > .OsMxUq_folder > .u9X6NG_unstyledLink > .OsMxUq_folderImage"));
            new Actions(driver).MoveToElement(element).Perform();
            element.Click();

            new Actions(driver).MoveToElement(driver.FindElement(By.TagName("body")), 0, 0).Perform();

            driver.FindElement(By.CssSelector("div:nth-child(2) > .OsMxUq_folder > .u9X6NG_unstyledLink > .OsMxUq_folderImage")).Click();
            driver.FindElement(By.CssSelector(".ryxRiG_wrapper:nth-child(1) > .\\_73re8W_pickerBadgeContainer")).Click();
            driver.FindElement(By.CssSelector(".\\_8HzuwW_button:nth-child(2)")).Click();
        }
        catch (Exception ex)
        {
            Console.WriteLine($" Failed to initialize post setup: {ex.Message}");
            return;
        }

        try
        {
            foreach (var creator in creators)
            {
                PostForCreator(creator);

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error posting for { creator.CreatorName}: { ex.Message} ");
        }
        Thread.Sleep(8000);


    }

    public void PostForCreator(CreatorData data)
    {
        driver.FindElement(By.CssSelector(".n3Mc_G_mentions__input")).Click();
        driver.FindElement(By.CssSelector(".n3Mc_G_mentions__input")).SendKeys(data.Message);

        driver.FindElement(By.CssSelector(".\\_63d-OW_actionButton:nth-child(1) path:nth-child(1)")).Click();
        driver.FindElement(By.CssSelector(".\\_8HzuwW_button")).Click();
        driver.FindElement(By.CssSelector(".\\_7lrYkG_primary > .\\_7lrYkG_text > .\\_7lrYkG_text")).Click();
        driver.FindElement(By.CssSelector(".ztm8ka_expandingButtonCard:nth-child(3) > .ztm8ka_headerContainer")).Click();

        driver.FindElement(By.Name("date")).Click();
        driver.FindElement(By.CssSelector(".rdp-row:nth-child(4) > .rdp-cell:nth-child(6) > .rdp-button_reset")).Click();
        driver.FindElement(By.CssSelector(".KRC-ZW_inputWrapper:nth-child(1)")).Click();
        driver.FindElement(By.Name("time")).SendKeys(data.StartTime);

        driver.FindElement(By.CssSelector(".\\_8aiCSq_slider")).Click();

        driver.FindElement(By.Name("tillDate")).Click();
        driver.FindElement(By.CssSelector(".rdp-row:nth-child(4) > .rdp-cell:nth-child(7) > .rdp-button_reset")).Click();
        driver.FindElement(By.Name("tillTime")).Click();
        driver.FindElement(By.Name("tillTime")).SendKeys(data.EndTime);

        driver.FindElement(By.CssSelector(".\\_7lrYkG_primary")).Click();
    }
}

class Program
{
    static void Main(string[] args)
    {
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
        string excelPath = "x";
        if (!File.Exists(excelPath))
        {
            Console.WriteLine("Excel file not found. Please ensure 'Creators.xlsx' exists in the executable directory.");
            return;
        }
        try
        {
            var creators = ReadCreatorsFromExcel(excelPath);
            Console.WriteLine($"Loaded {creators.Count} creator(s) from Excel.");
            using (var test = new SuiteTests())
            {
                test.Planningpostfotovideofromalbum(creators);
            }
        }
        



       

        catch (Exception ex)
        {
            Console.WriteLine($" Failed to read Excel file: {ex.Message}");
            return;
        }
    }

    static List<CreatorData> ReadCreatorsFromExcel(string filePath)
    {
        var list = new List<CreatorData>();
        using (var package = new ExcelPackage(new FileInfo(filePath)))
        {
            var worksheet = package.Workbook.Worksheets[0];
            int row = 2;
            while (worksheet.Cells[row, 1].Value != null)
            {
                list.Add(new CreatorData
                {
                    CreatorName = worksheet.Cells[row, 1].Text,
                    Message = worksheet.Cells[row, 2].Text,
                    StartTime = worksheet.Cells[row, 3].Text,
                    EndTime = worksheet.Cells[row, 4].Text
                });
                row++;
            }
        }
        return list;
    }
}
